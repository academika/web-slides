= slide 'Git-future requests' do
  p Създайте акаунт в github, изтеглете и инсталирайте git клиент
= slide 'Pre-requests' do
  ol
    li Създайте разклонение (fork), на даден проект (repo). Fork представлява правене на копие на оригиналният проект.
    li Създайте папка и влезте с конзолата в нея (например `c:\temp\myprj`)
    li `git status` - в папката, в която ще работите - дава, че в папката няма проект, който да е в github
    li `git clone https://github.com/academika/name-of-project` - сваля проекта локално
    li `cd name-of-project`
    li `git status` - имаме свален проект

= slide 'Create branch' do
  ol
    li `git checkout -b my_task1` - създава клон (branch), в който ще работим по даден проблем или нова характеристика.
    li `git branch` - проверява в кой клон (branch) се намираме в момента; имаме главен (master) и новосъздаденият (my_task1).
    li Правим промяна в папката (например създаваме папка, редактираме/добавяме файлове), отговаряща на поставените ни изисквания.
    li `git status` - дава в червено, че сме добавили файл, който потенциално може да искаме да качим. 
    li `git add filename` (или `git add folder/filename`) - добавяме файл или папка 
    li `git status` - дава в зелено, че имаме промени в т.нар staging area. 
    li `git commit -m "Meaningfull message"` - качваме всички добавени файлове и директории от добавените. 
    li `git status` - показва, че няма какво да се качва.
    li `git log` - може да видим съобщението и всички промени в даденият клон (branch)
    li Отиваме в гитхъб - и може да видим, че имаме един клон (branch) - в повече


= slide 'Pull request (PR)' do
  p Когато мислите, че сте готови с дадена характеристика е време да се качи публично
  ol
    li Може да направим заявка за промяна - като може да е в нашето репозитори или в оригиналното
    li От github -> Натискаме `Pull request`
    li Всеки, имащ достъп то хранилището може да ни даде обратна връзка;
    li Докато чакаме обратната връзка - може да работим по втора задача, за целта може да направим нов branch

= slide 'Second branch' do
  ol
    li `git branch` - дава в кой клон сме в момента
    li `git checkout master` - сменяме да сме обратно в главният (master) branch. Ако проверим - ще забележим, че промените от работата по предишният бранч е изчезнал от файловата система
    li `git log` - може да се види, че комит-а не е обединен в главният клон. 
    li `git checkout -b my_task2` - създаваме втори клон
    li Правим модификации и проверяваме с  `git status` - показва, че има промени
    li `git diff` - дава разликите на текущата папка с тази на сървъра
    li `git commit -m 'Промени по кода'` 
    li `git status` - виджаме тези промени
    li `git push origin my_task2` - вече имаме два клона (branch)
    li Може отново да дадем pull request - за качване в github


= slide 'Resolve conflicts' do
  ol 
    li След време - ако се работи по-дълго по даден branch - може да се появят конфликти
    li Два варианта за справяне: 1) Rebase (разкачане на кода, от точката на направата на branch) и обединяване; 2) да се обедини нашият feature branch
    li `git branch`
    li `git checkout master` - връщаме се в основният клон
    li В момента в който се обедини (merge) - заявката (PR) - то тя още не е в локалните кодове, и трябва да се изтеглят;
    li Когато получиш обратна връзка - коригираш и правиш нов PR. 
    li Трябва да се свали бранча, и да се качат промените;
    li `git push origin my_task2`

/ = slide 'Online platforms 2020'
/   ol
/     li Kahoot  / Kahoot quiz
/     li Zoom.us
/     li Discord
/     li ms teams?
/     li fb live stream
/     li youtube stream?
/     li bbb?

        


